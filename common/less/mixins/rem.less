@import "../variables.less";

// 根方法
.px-to-rem(@propertyName, @propertyValue) {
  //Loop counter
  @count: length(@propertyValue);
  //Change rem to px
  .px-rem-gen(@count, @propertyValue, "", @propertyName);
}

.px-rem-gen (@count, @pxIPList, @pxFPList, @propertyName) when (@count = 0) {
    @{propertyName}: @pxFPList;
}

//Recursive Loop: with units
//  Need to change rem to px here
//  @param count: The loop counter index
//  @param pxIPList: The incoming property list
//  @param pxFPList: The in process final property list
//  @param propertyName: The CSS property being set
.px-rem-gen (@count, @pxIPList, @pxFPList, @propertyName) when (@count > 0) {
  //Getting current property
  @currentProperty: extract(@pxIPList, @count);

  //Mixin as a function returns updated value
  .px-rem-update-unit(@currentProperty);

  @updatedValue: @calculatedProperty;
  //Appending update property
  @modifiedProperty: ~"@{updatedValue} @{pxFPList}";

  //Recursion
  .px-rem-gen(@count - 1, @pxIPList, @modifiedProperty, @propertyName);
}

.px-rem-update-unit (@currentProperty) when (isunit(@currentProperty, "px")) {
  @calculatedValue: unit(@currentProperty) / @fontRoot * 1rem;
  @calculatedProperty: ~"@{calculatedValue}";
}
// 兼容没有单位 默认为 px
.px-rem-update-unit (@currentProperty) when (isunit(@currentProperty, "")) {
  @calculatedValue: unit(@currentProperty) / @fontRoot * 1rem;
  @calculatedProperty: ~"@{calculatedValue}";
}
